name: 'Terraform CI/CD'

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'terraform/**'
  pull_request:
    branches:
      - main
      - master
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  TF_VERSION: '1.6.0'
  TF_WORKING_DIR: './terraform'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan'
      run: |
        terraform plan -no-color -input=false \
          -var="environment=${{ github.event.inputs.environment || 'dev' }}" \
          -var-file="environments/${{ github.event.inputs.environment || 'dev' }}.tfvars"
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: ${{ steps.plan.outputs.stdout }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          
          ### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          
          ### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          
          ### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event_name == 'push' || github.event.inputs.action == 'apply'
      run: |
        terraform apply -auto-approve -input=false \
          -var="environment=${{ github.event.inputs.environment || 'dev' }}" \
          -var-file="environments/${{ github.event.inputs.environment || 'dev' }}.tfvars"

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        terraform destroy -auto-approve -input=false \
          -var="environment=${{ github.event.inputs.environment || 'dev' }}" \
          -var-file="environments/${{ github.event.inputs.environment || 'dev' }}.tfvars"

    - name: Output Terraform Results
      if: always()
      run: |
        echo "Terraform Format: ${{ steps.fmt.outcome }}"
        echo "Terraform Init: ${{ steps.init.outcome }}"
        echo "Terraform Validate: ${{ steps.validate.outcome }}"
        echo "Terraform Plan: ${{ steps.plan.outcome }}"